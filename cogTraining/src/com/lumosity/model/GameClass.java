package com.lumosity.model;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.lumosity.model.base.BaseGameClass;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class GameClass extends BaseGameClass<GameClass> {
	public static final GameClass dao = new GameClass();
	
	public List<GameClass> findAll() {
		return find("select * from game_class where gameClassId < 6");
	}
	
	public List<Record> findAll2(Long userId) {
		String sql = " SELECT gc.*, o.`expireTime` FROM game_class gc " +
                " LEFT JOIN `order` o ON (gc.`gameClassId` = o.`gameClassId` AND o.`status` = 1 AND o.userId = ?) " +
                " WHERE gc.`gameClassId` < 6  GROUP BY gc.`gameClassId`";
		return Db.find(sql, userId);
	}
	
	/**根据名称查询记录**/
	public List<GameClass> findByName(String name) {
		return find("select * from game_class where dis =?", name);
	}
	
	/**根据名称查询记录**/
	public List<Record> findByName2(String name) {
		String sql = " SELECT gc.*, o.`expireTime` FROM game_class gc " +
                " LEFT JOIN `order` o ON (gc.`gameClassId` = o.`gameClassId` AND o.`status` = 1) " +
                " where dis =? GROUP BY gc.`gameClassId`";
		return Db.find(sql, name);
	}
	
	/**
	 * 根据大类ID查询小类集合
	 * @param trainClassId
	 * @return
	 */
	public List<GameClass> findByTrainClass(Integer trainClassId) {
		return find("select * from game_class where trainClassId =?", trainClassId);
	}
	
	/**
	 * 计算
	 * @param gameDate
	 * @return
	 */
	public float totalPrice(Integer gameDateId, String gameClassIds) {
		if (StringUtils.isBlank(gameClassIds)) return 0;
		
		int value = Integer.parseInt(findDictDateById(gameDateId).getStr("value"));
		String sql = "SELECT * FROM " +
					 "	(" +
					 "	SELECT gc.*,pb.`outPrice` FROM game_class gc " +
					 "	LEFT JOIN price_base pb ON (gc.`gameClassId` = pb.`gameClassId` AND pb.`gameDate` = ?) " +
					 "	WHERE gc.`trainClassId` = 1 " +
					 "	ORDER BY pb.`priceBaseId` DESC " +
					 "	) AS t1 " +
					 "	GROUP BY t1.gameClassId";
		
		List<Record> list = Db.find(sql, gameDateId);
		float totalPrice = 0;
		List<String> gameClassList = new ArrayList<>();
		String[] gameClassIdss = gameClassIds.split(",");
		for (String gcId : gameClassIdss) {
			if (StringUtils.isNotBlank(gcId)) {
				gameClassList.add(gcId);
			}
		}
		
		for (Record record : list) {
			if (gameClassList.contains(String.valueOf(record.getInt("gameClassId")))) {
				totalPrice += record.get("outPrice")  == null ?  25 * value : record.getBigDecimal("outPrice").floatValue();
			}
		}
		return totalPrice;
	}
	
	public Record findDictDateById(Integer dictDateId) {
		return Db.findFirst("select * from dict_data dd where dd.id = ?", dictDateId);
	}
	
	/**
	 * 查询认知训练对应价格
	 * @return
	 */
	public List<Record> findGameClassPrice() {
		String sql = "SELECT gc.`gameClassId`,gc.`gameClassName`, gcp.`price` "
				+ "FROM game_class gc LEFT JOIN game_class_price gcp ON gc.`gameClassId` = gcp.`gameClassId` "
				+ "WHERE gc.`trainClassId` = 1";
		return Db.find(sql);
	}
	
	/**
	 * 查询认知训练时间
	 * @return
	 */
	public List<Record> findGameClassTime() {
		String sql = "select * from game_class_time";
		return Db.find(sql);
	}
}
